<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yilin.app.mapper.WalletMapper">
    <resultMap id="BaseResultMap" type="com.yilin.app.domain.Wallet">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="money" jdbcType="REAL" property="money"/>
        <result column="serise" jdbcType="TINYINT" property="serise"/>
    </resultMap>
    <resultMap id="PageMap" type="HashMap">
        <result column="money" jdbcType="REAL" property="money"/>
        <result column="serise" jdbcType="TINYINT" property="serise"/>
        <result column="role_id" jdbcType="TINYINT" property="roleId"/>
    </resultMap>

    <resultMap id="RecordMap" type="HashMap">
        <result column="money" jdbcType="REAL" property="money"/>
        <result column="title1" jdbcType="VARCHAR" property="title1"/>
        <result column="title2" jdbcType="VARCHAR" property="title2"/>
        <result column="symbol" jdbcType="VARCHAR" property="symbol"/>
        <result column="mark" jdbcType="VARCHAR" property="mark"/>
        <result column="time" jdbcType="TINYINT" property="time"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, user_id, money, serise
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from wallet
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from wallet
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.yilin.app.domain.Wallet">
        insert into wallet (id, user_id, money,
        serise)
        values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{money,jdbcType=REAL},
        #{serise,jdbcType=TINYINT})
    </insert>
    <insert id="insertSelective" parameterType="com.yilin.app.domain.Wallet">
        insert into wallet
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="money != null">
                money,
            </if>
            <if test="serise != null">
                serise,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="money != null">
                #{money,jdbcType=REAL},
            </if>
            <if test="serise != null">
                #{serise,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.yilin.app.domain.Wallet">
        update wallet
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="money != null">
                money = #{money,jdbcType=REAL},
            </if>
            <if test="serise != null">
                serise = #{serise,jdbcType=TINYINT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.yilin.app.domain.Wallet">
        update wallet
        set user_id = #{userId,jdbcType=INTEGER},
        money = #{money,jdbcType=REAL},
        serise = #{serise,jdbcType=TINYINT}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="addMoney" parameterType="map">
        update wallet
        set
        money = money + #{money,jdbcType=REAL}
        where user_id = #{userId} and serise = #{serise}
    </update>


    <update id="refundMoney" parameterType="map">
        update wallet
        set
        money = money + #{money,jdbcType=REAL}
        where user_id = #{userId} and serise = (SELECT DISTINCT serise from order_comm where order_id = #{orderId})
    </update>
    <update id="takeMoney" parameterType="map">
        update wallet
        set
        money = money - (SELECT totals from orders where id = #{orderId})
        where user_id = #{userId} and serise = (SELECT serise from orders where id = #{orderId})

    </update>

    <select id="getMoney" parameterType="map" resultType="float">
        select money from wallet where user_id = #{userId} and serise = #{serise}
    </select>

    <select id="getMoney2" parameterType="map" resultType="float">
        select money from wallet where user_id = #{userId}
        and serise = (SELECT serise from orders where id = #{orderId})
        and money >= (SELECT totals from orders where id = #{orderId})
    </select>

    <select id="selectList" parameterType="map" resultMap="PageMap">
    select money,w.serise,role_id from wallet w
    LEFT JOIN user_role r on w.serise = r.serise and r.user_id = #{userId}
    where w.user_id = #{userId}
  </select>

    <select id="selectRecords" parameterType="map" resultMap="RecordMap">
select * from (
  select '采购商品' title1,concat(c.name,'×',num)as title2,price*num money,'-' symbol,o.time,'采购' mark from order_comm
  LEFT JOIN commodity c on comm_id = c.id
  inner join orders o on o.id = order_id and o.status in (2,3,4)
  where user_id = #{userId}
  union ALL
  SELECT '充值记录' title1,'' title2,money,'+' symbol,time,'充值' mark from recharge
  where user_id = #{userId} and status = 2
)a order by time desc limit #{start},#{pageSize}
    </select>
</mapper>