<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yilin.app.mapper.CommodityMapper">
    <resultMap id="BaseResultMap" type="com.yilin.app.domain.Commodity">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="serise" jdbcType="TINYINT" property="serise" />
        <result column="stock" jdbcType="INTEGER" property="stock" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="e_name" jdbcType="VARCHAR" property="eName" />
        <result column="descript" jdbcType="VARCHAR" property="descript" />
        <result column="type" jdbcType="TINYINT" property="type" />
        <result column="scale" jdbcType="VARCHAR" property="scale" />
        <result column="qr_code" jdbcType="VARCHAR" property="qrCode" />
        <result column="start" jdbcType="TIMESTAMP" property="start" />
        <result column="img" jdbcType="VARCHAR" property="img" />
        <result column="m_price" jdbcType="REAL" property="mPrice" />
        <result column="a_price" jdbcType="REAL" property="aPrice" />
        <result column="status" jdbcType="TINYINT" property="status" />
    </resultMap>

        <sql id="Base_Column_List">
            id, serise, stock, name, e_name, descript, type, scale, qr_code, start, img, status
        </sql>
        <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
            select
            <include refid="Base_Column_List" />
            from commodity
            where id = #{id,jdbcType=INTEGER}
        </select>
        <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
            delete from commodity
            where id = #{id,jdbcType=INTEGER}
        </delete>
        <insert id="insert" parameterType="com.yilin.app.domain.Commodity" useGeneratedKeys="true" keyColumn="id"
                keyProperty="id">
            insert into commodity (id, serise, stock,
            name, e_name, descript,
            type, scale, qr_code,
            start, img, status
            )
            values (#{id,jdbcType=INTEGER}, #{serise,jdbcType=TINYINT}, #{stock,jdbcType=INTEGER},
            #{name,jdbcType=VARCHAR}, #{eName,jdbcType=VARCHAR}, #{descript,jdbcType=VARCHAR},
            #{type,jdbcType=TINYINT}, #{scale,jdbcType=VARCHAR}, #{qrCode,jdbcType=VARCHAR},
            #{start,jdbcType=TIMESTAMP}, #{img,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT}
            )
        </insert>
        <insert id="insertSelective" parameterType="com.yilin.app.domain.Commodity" useGeneratedKeys="true" keyColumn="id"
                keyProperty="id">
            insert into commodity
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <if test="id != null">
                    id,
                </if>
                <if test="serise != null">
                    serise,
                </if>
                <if test="stock != null">
                    stock,
                </if>
                <if test="name != null">
                    name,
                </if>
                <if test="eName != null">
                    e_name,
                </if>
                <if test="descript != null">
                    descript,
                </if>
                <if test="type != null">
                    type,
                </if>
                <if test="scale != null">
                    scale,
                </if>
                <if test="qrCode != null">
                    qr_code,
                </if>
                <if test="start != null">
                    start,
                </if>
                <if test="img != null">
                    img,
                </if>
                <if test="status != null">
                    status,
                </if>
            </trim>
            <trim prefix="values (" suffix=")" suffixOverrides=",">
                <if test="id != null">
                    #{id,jdbcType=INTEGER},
                </if>
                <if test="serise != null">
                    #{serise,jdbcType=TINYINT},
                </if>
                <if test="stock != null">
                    #{stock,jdbcType=INTEGER},
                </if>
                <if test="name != null">
                    #{name,jdbcType=VARCHAR},
                </if>
                <if test="eName != null">
                    #{eName,jdbcType=VARCHAR},
                </if>
                <if test="descript != null">
                    #{descript,jdbcType=VARCHAR},
                </if>
                <if test="type != null">
                    #{type,jdbcType=TINYINT},
                </if>
                <if test="scale != null">
                    #{scale,jdbcType=VARCHAR},
                </if>
                <if test="qrCode != null">
                    #{qrCode,jdbcType=VARCHAR},
                </if>
                <if test="start != null">
                    #{start,jdbcType=TIMESTAMP},
                </if>
                <if test="img != null">
                    #{img,jdbcType=VARCHAR},
                </if>
                <if test="status != null">
                    #{status,jdbcType=TINYINT},
                </if>
            </trim>
        </insert>
        <update id="updateByPrimaryKeySelective" parameterType="com.yilin.app.domain.Commodity">
            update commodity
            <set>
                <if test="serise != null">
                    serise = #{serise,jdbcType=TINYINT},
                </if>
                <if test="stock != null">
                    stock = #{stock,jdbcType=INTEGER},
                </if>
                <if test="name != null">
                    name = #{name,jdbcType=VARCHAR},
                </if>
                <if test="eName != null">
                    e_name = #{eName,jdbcType=VARCHAR},
                </if>
                <if test="descript != null">
                    descript = #{descript,jdbcType=VARCHAR},
                </if>
                <if test="type != null">
                    type = #{type,jdbcType=TINYINT},
                </if>
                <if test="scale != null">
                    scale = #{scale,jdbcType=VARCHAR},
                </if>
                <if test="qrCode != null">
                    qr_code = #{qrCode,jdbcType=VARCHAR},
                </if>
                <if test="start != null">
                    start = #{start,jdbcType=TIMESTAMP},
                </if>
                <if test="img != null">
                    img = #{img,jdbcType=VARCHAR},
                </if>
                <if test="status != null">
                    status = #{status,jdbcType=TINYINT},
                </if>
            </set>
            where id = #{id,jdbcType=INTEGER}
        </update>
        <update id="updateByPrimaryKey" parameterType="com.yilin.app.domain.Commodity">
    update commodity
    set serise = #{serise,jdbcType=TINYINT},
      stock = #{stock,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      e_name = #{eName,jdbcType=VARCHAR},
      descript = #{descript,jdbcType=VARCHAR},
      type = #{type,jdbcType=TINYINT},
      scale = #{scale,jdbcType=VARCHAR},
      qr_code = #{qrCode,jdbcType=VARCHAR},
      start = #{start,jdbcType=TIMESTAMP},
      img = #{img,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>


    <select id="selectPage" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        ,m.price m_price
        <if test="userId != null">
          ,a.price a_price
        </if>
        from commodity c
        left join price m on c.id = m.comm_id and m.role_id = 0
        <if test="userId != null">
            left join price a on c.id = a.comm_id
            and a.role_id = (SELECT role_id from user_role where user_id = #{userId} and serise = #{serise})
        </if>
        where status != 2
        <if test="serise != null">
            and serise = #{serise}
        </if>
        <if test="type != null">
            and type = #{type}
        </if>
        limit #{start}
        <if test="pageSize != null and pageSize != 0">
            ,#{pageSize}
        </if>
    </select>

    <select id="count" parameterType="map" resultType="java.lang.Integer">
        select
        count(id)
        from commodity
        where status != 2
        <if test="serise != null">
            and serise = #{serise}
        </if>
        <if test="type != null">
            and type = #{type}
        </if>
    </select>

    <select id="selectOne" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
            ,m.price m_price
        <if test="userId != null">
            ,a.price a_price
        </if>
        from commodity c
        left join price m on c.id = m.comm_id and m.role_id = 0
        <if test="userId != null">
          left join price a on c.id = a.comm_id
          and a.role_id = (SELECT role_id from user_role where user_id = #{userId} and serise = c.serise)
        </if>
        where id = #{commId,jdbcType=INTEGER}
    </select>

    <select id="selectPrice" parameterType="int" resultType="float">
    select
    price
    from price p
    where comm_id = #{commId}
  </select>

    <select id="selectAllPrice" parameterType="map" resultType="float">
        select
        price
        from price p
        where comm_id = #{commId}

    </select>

    <select id="selectByType"  resultType="int">
        select
        id
        from commodity
        where type = #{type}
        limit 1

    </select>

    <update id="updateByType" >
        update commodity set type = 0 where type = #{type}
    </update>
</mapper>